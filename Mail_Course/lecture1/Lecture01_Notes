open - Открытие файла, сист вызов

close - закрытие файла, сист вызов

lseek - смещение указателя в файле относительно текущего/ других положений (есть настройки). Возможно создание дырок (сикнули на 1мб пустого пространства. Для некоторых случаев не работает (например в пайпе нет указателя).

read (filedis, buffer, buffersize) - читаем из файла. Нужно читать пока read не вернул 0. Чтение идет не непосредственно с диска, а из page cache (перед тем как прочитать файл пишется в page cache). Читаемт с текущего указателя позиции.

write (filedis, buffer, bufsize) - запись в файл. ошибка - передавать sizeof() размер ссылки а не массива. Пишет с текущего указателя позиции. Если O_Append флаг - пишет в конец файла. Чем больше данных пишешь за раз - тем быстрее будет писаться. Жесткому диску все равно, писать 1 мб. В презентации таблица файлов.

fork - когда процесс клонирует сам себя. Один из единственных способов воздать процесс. У них будет общие файловые дискрипторы, сокеты и тд... Память становится разной только когда пытаются изменить в одном из процессов что то. В случае форка одна таблица файлов => у них укзатель будет на одно место в файле. В итоге: лучше не работать с файлами из форка.

Атомарная работа с файлами.
O_APEND - атомарная, чтобы например записать лога.
O_EXCL - если файл существовал - верни ошибку.

dup - системный вызов - дублирет файловый дискриптор и дает ему минимальный файловый дискриптор.
dup2 - дает какой то определныый новый фаловый ддискриптор.

write - это запись в оперативку, а не на диск. Если write прошел - не факт что данные записались на диск. Системные вызовы fsync, fdatasync - больше гарантий.
fsync - передаем файл дескриптор, а он по этому дескриптору сбразсывает файлы на диск. Медленно, так как работает непосредственно с жестким диском.
fdatasync - сбрасываюстя только данные
sync - сбросить вообще все (кэш, файлы и тд...)
Казалось бы, sync медленнее fsync, но это не всегда так.(Барьеры файловой системы.)
=> write быстро относительно пишет, fsync и его аналоги выполняются медленно.

fcntl - файловый вызов, изменение натсроек файл. дискриптора. Принимает дискриптор, набор того что с ним нужно сделать. Основные флаги в презе.

stat, fstat - мета информация файла
lstat - не следует за символьными ссылками. Он работает метаинформацию символьной ссылки


Как проверяются права доступа?
Все каталоги, в которых находится файл, должны иметь права на исполнение.
access - сист вызов, проверка прав доступа файла.

umask - сист вызов, вопрос безопасности. Установить права на созадние чего либо.

chmod, fchmod - изменение прав 

link/unlink - удалить ссылку на файл. Допустим создали файл дискриптор, далее сделали unlink file. Файл будет жить, пока на него есть дискриптор.

Атомарное создание большого файла - делаем open, скачиваем файл, и после ставим link на этот файл. Link - атомарный.

rename - переименование файла.

mkdir - создание каталога.

getc, fgetc, getchar - посимвольное чтение
putc, fputc, putchar - заапись посимвольная.

Передавать структуры лучше явно то что нужно.

snprintf - возвращает сколько байт она хотела записать. Если snprintf вернула

любая функция, которая начинается с str - Зло.

tmpfile - атомарный. Создает временный файл.

Стандартный поток ввода/вывода буфферизуется построчно.

fflush - сбрасывает буфер. Гарантировано записывает на диск.
