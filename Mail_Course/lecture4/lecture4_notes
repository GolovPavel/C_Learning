Типы доменов:
PF_UNIX - что то типо пайпа, локально
PF_INET - 4 версия протокола - главный тип.
PF_INET6 - 6 версия протокола.

Виды сокетов:
SOCK_STREAM - поток байт (TCP)
SOCK_DGRAM - датаграмма (UDP, Unix socket)
SOCK_RAW - "сырые" сокеты

Зачем передавать дескриптор из одного процесса в другой?
Один сервер падает, мы форкаемся и передаем сокет в другой процесс и продолжаем слушать

bind() - прнимает сокет, аддресс на котором слушаем и длинна аддресса. Sockadr - не та структура, которую мы передаем, а sock_len для того, чтобы мы могли понять, что за структура передана реально.
Нужно проверять, что bind вернул хороший код ответа, иначе аддресс занят.

Смена порядка байт.
Хостовый порядок байт и сетевой порядок байт.
Биты передаются в норм порядке, байты могут перемешиваться.

Структура sockaddr
принимает sa_family (PF_INET, PF_UNIX)....

Структура sockaddr_in6
на презентации.

listen() - сокет начинает принимать соединения.
Принимает сокет и backlog - число соединений, которые будут висеть в очереди на сокет. Соединение закрывается, когда на сокете вызван accept()
backlog - нужно подобрать оптимальное значение между слишком большим и слишком маленьким значениями.

accept() - принимаем клиента. Возвращает дескриптор клиента - пишем в него информацию.
принимает адресс - айпишник того, что к нам пришел (не наш айпишник!!!), sockaddr и address_len

connect() - клиентский системный вызов. Возможен для tcp - обязательно, для udp - опционально.
Клиент пишет прямо в сокет, который создал

Запись в сокет:
send() - то же что write, но с дополнительными флагами.
По дефолту запись/чтение в сокет - блокирующие. Если поставим сокет неблокирующий, то на чтении будем блок, а на записи не всегда. На записи блокируеся тогда, когда у нас нулевое окно.
В tcp нужно обязательно делать в цикле, так как окно может быть меньше, чем данные - то есть за раз не все данные не могут быть отправлены. Send возвращает сколько было отправлено.

Через sendmsg можно передавать открытый фаловый дескриптор

Вычитывание из сокета
recv - принимает сокет, буфер, флаги. Вычитывает байты, но не больше, чем размер буфера. -1 - ошибка, 0 - пришел FIN пакет, с другой стороны закрыто на запись, у вас на чтение, но писать вы в него можете! Тяжело работать с датаграммами, так как датаграммы приходят только целиком.
recvfrom - Гарантировано вычитывает новую датаграмму.
recvmsg
Буффер  - не больше MTU

ЧЕРЕЗ unix сокет можно передавать сокетный дескритпор!

Передавать надо не айпишник, а спец структуру. ip_atoi преобразует строку аддреса к нужному типу.

shutdown - закрывает соединение на одном из сокетов. Close закрывает соединнение тогда когда закрыты все сокеты.
TCP: нельзя закрывать сокет до того пока не вычитали данные все. Как определить, что клиент больше писать не будет? Клиент после того,
как закончил писать, должен вызвать shotdown => Сервер вычитает все и в конце получит 0 из recv. Вывод: контролируем, чтобы из сокета вычитывалось все,
иначе TCP не надежный.
Если нам пришли данные, а мы их не вычитали и послали что то или закрыли, то отправится RST пакет.

setsockopt параметры:
int socket,
int level - если sol_socket:
--so_error - ??????????????????
--so_keepalive - проверить что соедиение живо - посылаем пакет без данных;
--so_reuseaddr - для переиспользования сетевых соединений. - только для клиентских сокетов.
--so_reuseport - 2 разных процесса могут слушать 1 и тот же аддресс. Балансирует так же
--so_sndtimeeo, so_rcvtimeo - установить таймаут между чтениями/записями. Боль - если читать в цикле, то каждый раз будет таймаут. Плохая реализация.

Опции TCP.
TCP_NODELAY - отключить алгаритм нейгла.
TCP_QuickACK - быстрое подтверждение пакета
TCP_SYNCNT - сколько попытак делать на SYN ACK
TCP_MAXSEG - усттановить жестко масимальный размер сегмента.

sendfile
Стандартный способ - читаем из файла и посылаем в сокет - происходит лишнее копирование, лишние сист вызовы. Sendfile оптимизирует процесс.
sendfile может менять укзатель в файле. Если offset = null, то используем указатель системный и укзатель в файле меняется. Если же свой указатель передаем,
то системный указатель не используется и не меняется указатель в файле.

БЕзопасный таймер: создаем файловый дискриптор, из которого можно читать только тогда, когда прошло время.

select - система выдачи файловых дискрипторов. принимает множества фал дискрипторов.
nfds - максимальный фаловый дискриптор + 1
Работает только с неблокирующими сокетами.
Плохая особенность - если фаловый дескриптор больше 1024 - бьется память и все ломается. => не используем его.

poll - брат близнец. Получает структуру, в кот есть фаловый дескриптор и события.
события в презентации. события со звездой на презентации не нужно мониторить. Получить ошибку на сокете можно с пом-ю getsocketopt

epoll - разница в том, что poll и select работают за O(n), epoll - работает за O(1)
epol_create - создает фаловый дескриптор.
epoll_ctl - опции ставим
epoll_wait - принимает епол дискриптор и события.
Епол проверяет только один сокет, на кот произошло событие, а poll бегает по всем сокетам и проверяет их на событие.
Если на сокете вызвать close(), он автоматом удаляется из епола.
Edge-triggered and level-triggered - ???????????????????

Задание tcp_nodelay - отправили 1 байт, уснули, отправили 1 байт - не буфиризуется.
Задание
